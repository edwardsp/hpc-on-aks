apiVersion: storage.k8s.io/v1
kind: StorageClass
metadata:
  name: azurefile-csi-nfs
provisioner: file.csi.azure.com
parameters:
  protocol: nfs
  skuName: Premium_LRS
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: homedir
spec:
  accessModes:
  - ReadWriteMany
  storageClassName: azurefile-csi-nfs
  resources:
    requests:
      storage: 100Gi
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: install-of-user-actions
data:  
  of_installuseronly: |
    #!/usr/bin/env bash
    set -eo pipefail
    
    # This script should be executed on VM host in the directly as the deb 
    # will install systemd units and host dependencies.
    
    SECONDS=0
    
    umount /mnt || true
    
    USERNAME=hpcuser
    addgroup ${USERNAME}
    adduser --disabled-password --ingroup ${USERNAME} --no-create-home --gecos "" ${USERNAME} 
    
    getent passwd $user  > /dev/null

    if [ $? -ne 0 ];
    then
      echo "user installation failed"
      exit 1
    else
      echo "user installation successful"
    fi
    echo "installation completed in $SECONDS seconds"     
  
  of_installuserandhomedir: |        
    #!/usr/bin/env bash
    set -eo pipefail

    # This script should be executed on VM host in the directly as the deb
    # will install systemd units and host dependencies.

    SECONDS=0

    umount /mnt || true

    USERNAME=hpcuser
    addgroup ${USERNAME}
    adduser --disabled-password --ingroup ${USERNAME} --home /home/${USERNAME} --gecos "" ${USERNAME}

    getent passwd ${USERNAME}  > /dev/null

    if [ $? -ne 0 ];
    then
      echo "user installation failed"
      exit 1
    else
      echo "user creation successful"
    fi 

    if [[ ! -d /home/${USERNAME}/.ssh ]];
    then 
      sudo -u ${USERNAME} /bin/bash -c "ssh-keygen -q -f /home/${USERNAME}/.ssh/id_rsa -N '' "
      sudo -u ${USERNAME} /bin/bash -c 'echo -e "Host *\n\tStrictHostKeyChecking no" >> ~/.ssh/config && chmod 600 ~/.ssh/config'
      sudo -u ${USERNAME} /bin/bash -c 'cp ~/.ssh/id_rsa.pub ~/.ssh/authorized_keys'    
    fi

    if [ $? -ne 0 ];
    then
      echo "shh key configuration failed"
      exit 1
    else
      echo "shh key configuration successful"
    fi 

    echo "Adding source /opt/openfoam10/etc/bashrc to the users .bashrc"
    sudo -u ${USERNAME} /bin/bash -c 'echo -e "\n . /opt/openfoam10/etc/bashrc" >> ~/.bashrc' 

    echo "installation completed in $SECONDS seconds"
---
apiVersion: v1
kind: Pod
metadata:
  name: of-mpi-pod1
spec:
  containers:
  - name: openfoam-test
    image: __ACRNAME__.azurecr.io/ubuntu2004-mofed-hpcx-openfoam:latest
    securityContext:
      capabilities:
        add: ["IPC_LOCK"]
      privileged: true
    resources:
      requests:
        mellanox.com/shared_hca_rdma: 1
      limits:
        mellanox.com/shared_hca_rdma: 1
    command: ["/entrypoint.sh"] 
    args: ["of_installuserandhomedir"] # Adds the user to the pod, configures the ssh keys and adds the OpeanFoam initialization script to .bashrc
    volumeMounts:
    - name: homedir
      mountPath: "/home"
    - name: actions
      mountPath: "/opt/actions"
  volumes:
  - name: homedir
    persistentVolumeClaim:
      claimName: homedir
  - name: actions
    configMap:
      name: install-of-user-actions
---
apiVersion: v1
kind: Pod
metadata:
  name: of-mpi-pod2
spec:
  containers:
  - name: openfoam-test
    image: __ACRNAME__.azurecr.io/ubuntu2004-mofed-hpcx-openfoam:latest
    securityContext:
      capabilities:
        add: ["IPC_LOCK"]
      privileged: true
    resources:
      requests:
        mellanox.com/shared_hca_rdma: 1
      limits:
        mellanox.com/shared_hca_rdma: 1
    command: ["/entrypoint.sh"]
    args: ["of_installuseronly"] # Only add the user to the pod
    volumeMounts:
    - name: homedir
      mountPath: "/home"
    - name: actions
      mountPath: "/opt/actions"
  volumes:
  - name: homedir
    persistentVolumeClaim:
      claimName: homedir
  - name: actions
    configMap:
      name: install-of-user-actions
---
