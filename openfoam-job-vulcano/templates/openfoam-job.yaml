---
apiVersion: batch.volcano.sh/v1alpha1
kind: Job
metadata:
  name: {{ .Release.Name }}
spec:
  minAvailable: {{ .Values.numberOfNodes }}
  tasks:
  - replicas: {{ .Values.numberOfNodes }}
    name: worker
    template:
      spec:
        restartPolicy: Never
        containers:
        - name: worker
          image: {{ .Values.acrName }}.azurecr.io/ubuntu2004-mofed-hpcx-openfoam:latest
          securityContext:
            capabilities:
              add: ["IPC_LOCK"]
            privileged: true
          resources:
            requests:
              mellanox.com/shared_hca_rdma: 1
            limits:
              mellanox.com/shared_hca_rdma: 1
          command:
          - "bash"
          - "/opt/actions/hpcx-run"
          - |
            cp /opt/actions/openfoam-demo-action ./openfoam_demo.sh
            chmod u+x ./openfoam_demo.sh
            ./openfoam_demo.sh
          env:
          - name: POD_IP
            valueFrom:
              fieldRef:
                fieldPath: status.podIP
          - name: DBENCH_MOUNTPOINT
            value: /scratch
          - name: FIO_SIZE
            value: 1G
          volumeMounts:
          - name: {{ .Release.Name }}-homedir
            mountPath: /home
          - name: scratch
            mountPath: /scratch
          - name: actions
            mountPath: "/opt/actions"
        volumes:
        - name: {{ .Release.Name }}-homedir
          persistentVolumeClaim:
            claimName: {{ .Release.Name }}-homedir
        - name: scratch
          hostPath:
            path: /pv-disks/scratch
            type: Directory
        - name: actions
          configMap:
            name: {{ .Release.Name }}-configmap
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ .Release.Name }}-configmap
data:
  hpcx-run: |
    #!/bin/bash
    
    SECONDS=0
      
    # Correct permissions for the /scratch filesystem
    chmod 1777 /tmp
        
    printf "[ %6d ] Starting SSH daemon\n" $SECONDS
    /etc/init.d/ssh start
    
    printf "[ %6d ] Creating IP file (/home/jobs/{{ .Release.Name }}/hosts/${POD_IP})\n" $SECONDS
    mkdir -p /home/jobs/{{ .Release.Name }}/hosts
    touch /home/jobs/{{ .Release.Name }}/hosts/${POD_IP}
    
    printf "[ %6d ] Adding user ({{ .Values.userName }})\n" $SECONDS
    addgroup --gid {{ .Values.groupId }} {{ .Values.groupName }}
    adduser --disabled-password --uid {{ .Values.userId }} --ingroup {{ .Values.groupName }} --no-create-home --gecos "" {{ .Values.userName }}
    printf "[ %6d ] User added ($(getent passwd $user > /dev/null))\n" $SECONDS

    printf "[ %6d ] Waiting for hosts\n" $SECONDS
    while [ "$(ls /home/jobs/{{ .Release.Name }}/hosts | wc -l)" != "{{ .Values.numberOfNodes }}" ]; do
      printf "[ %6d ] - hosts available: $(ls /home/jobs/{{ .Release.Name }}/hosts | wc -l) out of {{ .Values.numberOfNodes }}\n" $SECONDS
      sleep 10
    done
    if [ "$(ls /home/jobs/{{ .Release.Name }}/hosts | head -n1)" = "${POD_IP}" ]; then
      AM_I_ROOT_POD=1
    else
      AM_I_ROOT_POD=0
    fi

    if [ "${AM_I_ROOT_POD}" = "1" ]; then
      printf "[ %6d ] Creating homedir for ({{ .Values.userName }})\n" $SECONDS
      mkhomedir_helper {{ .Values.userName }}

      if [[ ! -d /home/{{ .Values.userName }}/.ssh ]]; then
        printf "[ %6d ] Creating ssh key\n" $SECONDS
        cat <<EOF | sudo -u {{ .Values.userName }} bash
    ssh-keygen -q -f /home/{{ .Values.userName }}/.ssh/id_rsa -N ''
    echo -e "Host *\n\tStrictHostKeyChecking no" >> /home/{{ .Values.userName }}/.ssh/config
    chmod 600 /home/{{ .Values.userName }}/.ssh/config
    cp /home/{{ .Values.userName }}/.ssh/id_rsa.pub /home/{{ .Values.userName }}/.ssh/authorized_keys
    echo -e "\n . /opt/openfoam10/etc/bashrc" >> ~/.bashrc
    EOF
      else
        echo -e "SSH keys already exist"
      fi
      
      printf "[ %6d ] Creating hostfile\n" $SECONDS
      ls /home/jobs/{{ .Release.Name }}/hosts > /home/{{ .Values.userName }}/hostfile
      printf "[ %6d ] Hostfile contents:\n" $SECONDS
      cat /home/{{ .Values.userName }}/hostfile
      chown {{ .Values.userName }}:{{ .Values.groupName }} /home/{{ .Values.userName }}/hostfile
      chmod +r /home/{{ .Values.userName }}/hostfile
      
      printf "[ %6d ] Launching MPI\n" $SECONDS
      cat <<EOF | su - {{ .Values.userName }}
      module load mpi/hpcx
      $@

    EOF
      RESULT=$?
      
      printf "[ %6d ] Writing completion file (/home/jobs/{{ .Release.Name }}/complete)\n" $SECONDS
      if [ "$RESULT" = "0" ]; then
        echo "success" > /home/jobs/{{ .Release.Name }}/complete
      else
        echo "failure ($RESULT)" > /home/jobs/{{ .Release.Name }}/complete
      fi
    else
      printf "[ %6d ] Waiting for job completion (/home/jobs/{{ .Release.Name }}/complete)\n" $SECONDS
      while [ ! -f /home/jobs/{{ .Release.Name }}/complete ]; do
        sleep 10
      done
    fi
    printf "[ %6d ] Exiting, status: $(</home/jobs/{{ .Release.Name }}/complete))\n" $SECONDS

  openfoam-demo-action: |
    #!/usr/bin/env bash
    
    echo "Running an OpenFoam job"
    
    source /etc/profile
    module load mpi/hpcx
    source /opt/openfoam10/etc/bashrc
    
    CASE_NAME=motorbike_scaled
    CORES={{ .Values.procsTotal }}
    PPN={{ .Values.procsPerNode }}
    
    cp -r $WM_PROJECT_DIR/tutorials/incompressible/simpleFoam/motorBike $CASE_NAME
    cd $CASE_NAME
    
    # increase blockmesh size
    sed -i 's/(20 8 8)/(40 16 16)/g' system/blockMeshDict
    
    # Determine X,Y,Z based on total cores
    if [ "$(($PPN % 4))" == "0" ]; then
      X=$(($CORES / 4))
      Y=2
      Z=2
    elif [ "$(($PPN % 6))" == "0" ]; then
      X=$(($CORES / 6))
      Y=3
      Z=2
    else
      echo "Incompataible value of PPN: $PPN. Try something that is divisable by 4,6, or 9"
      exit -1
    fi
    echo "X: $X, Y: $Y, Z: $Z"
    
    # set up decomposition
    sed -i "s/numberOfSubdomains  6;/numberOfSubdomains $CORES;/g" system/decomposeParDict
    sed -i "s/(3 2 1);/(${X} ${Y} ${Z});/g" system/decomposeParDict
    
    # update runParallel to add MPI flags
    sed -i "s/runParallel\( *\([^ ]*\).*\)$/mpirun -np $CORES --map-by ppr:{{ .Values.procsPerNode }}:node -hostfile ~\/hostfile -x LD_LIBRARY_PATH -x UCX_TLS=rc -x PATH $(env |grep FOAM | cut -d'=' -f1 | sed 's/^/-x /g' | tr '\n' ' ') $(env |grep WM | cut -d'=' -f1 | sed 's/^/-x /g' | tr '\n' ' ') -x MPI_BUFFER_SIZE \1 -parallel 2\>\&1 |tee log\.\2/g" Allrun
    
    ./Allrun